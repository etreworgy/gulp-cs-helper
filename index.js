// Generated by CoffeeScript 1.7.1
(function() {
  var browserify, cache, coffee, compressor, concat, exec, getErrorHandler, gulp, gutil, path, source, uglify, watchify, _,
    __slice = [].slice;

  gulp = require('gulp');

  coffee = require('gulp-coffee');

  cache = require('gulp-cached');

  gutil = require('gulp-util');

  compressor = require('gulp-compressor');

  uglify = require('gulp-uglify');

  concat = require('gulp-concat');

  source = require('vinyl-source-stream');

  watchify = require('watchify');

  browserify = require('browserify');

  _ = require('underscore');

  path = require('path');

  exec = require('child_process').exec;

  getErrorHandler = function(label) {
    return function(err) {
      gutil.log("" + label + " error -- " + (err.toString()));
      gutil.log(err.stack);
      gutil.beep();
      return this.emit('end');
    };
  };

  exports.browserify = function(src, dest) {
    var destDir, destFileName;
    destFileName = path.basename(dest);
    destDir = path.dirname(dest);
    return function() {
      var rebundle, watcher;
      gutil.log("GulpHelpers.Browserify -- task started for " + destFileName);
      watcher = watchify(browserify(src, watchify.args));
      rebundle = function() {
        var watcherStream;
        gutil.log("GulpHelpers.Browserify -- Watcher for " + destFileName + " triggered update");
        watcherStream = watcher.bundle();
        watcherStream.on('error', getErrorHandler('Browserify')).on('log', function(msg) {
          return gutil.log("GulpHelpers.Browserify -- Watcher for " + destFileName + " logged '" + msg + "'");
        }).pipe(source(destFileName)).pipe(gulp.dest(destDir));
        return watcherStream;
      };
      watcher.on('update', rebundle);
      return rebundle();
    };
  };

  exports.coffee = function(options) {
    if (options == null) {
      options = {};
    }
    options = _.extend({
      src: './src/**/*.coffee',
      dir: './lib/',
      errorHandler: getErrorHandler('Coffee')
    }, options);
    return function() {
      var stream;
      stream = gulp.src(options.src).pipe(cache('coffee')).pipe(coffee()).on('error', options.errorHandler).pipe(gulp.dest(options.dir));
      return stream;
    };
  };

  exports.help = function(_gulp, options) {
    if (options == null) {
      options = {};
    }
    options = _.extend({
      src: './src/**/*.coffee',
      dir: './lib/'
    }, options);
    return _.extend(_gulp, {
      src: options.src,
      dir: options.dir,
      coffee: exports.coffee(options),
      watchSrc: function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _gulp.watch.apply(_gulp, [options.src].concat(__slice.call(args)));
      }
    });
  };

}).call(this);
